{
  "openapi": "3.0.1",
  "info": {
    "title": "Puppilot Scribing API",
    "description": "API for managing scribing sessions, audio uploads, and transcription services.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://scribe-api.puppilot.co/staging/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Login",
        "description": "Authenticate user and get an access token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login. Token valid for 1 hour.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" },
                    "token_type": { "type": "string", "example": "bearer" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Refresh Token",
        "description": "Exchange a valid refresh token for a new access token to maintain an active session without requiring the user to re-authenticate.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string"}
                },
                "required": ["token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" },
                    "token_type": { "type": "string", "example": "bearer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset Password",
        "description": "Reset user password with token that was emailed.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string", "format": "email" },
                  "new_password": {"type": "string"} 
                },
                "required": ["token", "new_password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Password has been reset successfully." }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-password-reset": {
      "post": {
        "summary": "Request Reset Password",
        "description": "Request a token to reset user password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Password reset token sent to the provided email." }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get Users Details",
        "description": "Retrieves details about the authenticated user.",
        "requestBody": {
          "description": "This endpoint does not require a request body.",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "email": { "type": "string", "format": "email" },
                    "name": { "type": "string" },
                    "organization_public_id": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/change-password": {
      "patch": {
        "summary": "Change password",
        "description": "Change a user's password to a new one.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "old_password": { "type": "string" },
                  "new_password": { "type": "string" }
                },
                "required": ["old_password", "new_password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Password changed successfully" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recording-sessions/create": {
      "post": {
        "summary": "Create a Recording Session",
        "description": "Creates a new recording session for scribing.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["name", "description"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recording session created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "updated_at": { "type": "string" },
                    "name": { "type": "string" },
                    "description": { "type": "string" },
                    "organization_public_id": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recording-sessions/get/{public_id}": {
      "get": {
        "summary": "Get recording session",
        "description": "Retrieve information for a recording session",
        "parameters": [
          {
            "name": "public_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Recording session retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "updated_at": { "type": "string" },
                    "name": { "type": "string" },
                    "description": { "type": "string" },
                    "organization_public_id": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recording-sessions/all": {
      "get": {
        "summary": "Get All Recording Sessions",
        "description": "Retrieve all created recording sessions.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 50 }
          }
        ],
        "responses": {
          "200": {
            "description": "List of recording sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "public_id": { "type": "string" },
                          "updated_at": { "type": "string" },
                          "name": { "type": "string" },
                          "description": { "type": "string" },
                          "organization_public_id": { "type": "string" }
                        }
                      }
                    },
                    "has_next": { "type": "boolean" },
                    "current_page": { "type": "integer" },
                    "items_per_page": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/all": {
      "get": {
        "summary": "Get All Templates",
        "description": "Retrieve all available scribing templates.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 50 }
          }
        ],
        "responses": {
          "200": {
            "description": "List of templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "public_id": { "type": "string" },
                          "name": { "type": "string" },
                          "description": { "type": "string" }
                        }
                      }
                    },
                    "has_next": { "type": "boolean" },
                    "current_page": { "type": "integer" },
                    "items_per_page": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/audio/generate-upload-url": {
      "post": {
        "summary": "Generate Upload URL",
        "description": "Generates a presigned URL for uploading audio files.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recording_session_public_id": {
                    "type": "string",
                    "description": "The public ID of the recording session."
                  },
                  "auto_scribe_template_public_id": {
                    "type": "string",
                    "description": "The public ID of the scribe template to use for automatic transcription. Optional.",
                    "nullable": true
                  }
                },
                "required": ["recording_session_public_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presigned URL generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string" },
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "Successful Response": {
                    "value": {
                      "url": "<string>",
                      "message": "Presigned URL generated successfully. Use it to upload the audio file."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scribe/request": {
      "post": {
        "summary": "Request Scribe",
        "description": "Request scribing for a recording session using a specified template.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recording_session_public_id": { "type": "string" },
                  "template_public_id": { "type": "string" }
                },
                "required": ["recording_session_public_id", "template_public_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scribing request created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "Successful Response": {
                    "value": {
                      "public_id": "<string>",
                      "message": "Scribing request created successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scribe/get/{public_id}": {
      "get": {
        "summary": "Get Scribe Status",
        "description": "Retrieve the status of a scribing request.",
        "parameters": [
          {
            "name": "public_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Scribing status retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "transcript_public_id": { "type": "string" },
                    "template_public_id": { "type": "string" },
                    "status": {
                      "type": "string",
                      "enum": ["requested", "scribing", "scribed"]
                    },
                    "categories_output": {
                      "type": "array",
                      "items": { "type": "object" }
                    }, 
                    "rtf_output": {
                      "type": "string"
                    
                    }
                  }
                },
                "examples": {
                  "Successful Response": {
                    "value": {
                      "public_id": "<string>",
                      "transcript_public_id": "<string>",
                      "template_public_id": "<string>",
                      "status": "scribed",
                      "categories_output": [],
                      "rtf_output": "{\\rtf1\\ansi\\deff0 ... }"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scribe/all": {
      "get": {
        "summary": "Get All Scribes",
        "description": "Retrieve all available scribe requests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 50 }
          }
        ],
        "responses": {
          "200": {
            "description": "List of scribe requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "public_id": { "type": "string" },
                          "updated_at": { "type": "string" },
                          "transcript_public_id": { "type": "string" },
                          "template_public_id": { "type": "string" },
                          "organization_public_id": { "type": "string" },
                          "status": { "type": "string", "example": "scribed" }
                        }
                      }
                    },
                    "has_next": { "type": "boolean" },
                    "current_page": { "type": "integer" },
                    "items_per_page": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/get": {
      "get": {
        "summary": "Get Organization Details",
        "description": "Retrieves details about the authenticated user's organization.",
        "operationId": "getOrganization",
        "tags": ["Organization"],
        "requestBody": {
          "description": "This endpoint does not require a request body.",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "Organization details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public_id": { "type": "string" },
                    "name": { "type": "string" },
                    "description": { "type": "string" },
                    "has_slack_bot_token": { "type": "boolean" },
                    "slack_channel": { "type": "string" },
                    "email_notification": { "type": "string"}
                  }
                },
                
                "example": {
                  "public_id": "<string>",
                  "name": "Organization Name",
                  "description": "Organization Description",
                  "has_slack_bot_token": true,
                  "slack_channel": null,
                  "email_notification": null
                }
              }
            }
          }
        }
      }
    },
    "/organizations/update-email-for-notification": {
      "patch": {
        "summary": "Email Notifications",
        "description": "Updates the organization's email notification settings.",
        "operationId": "updateEmailNotification",
        "tags": ["Organization"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address to be used for notifications."
                  }
                },
                "required": ["email"]
              },
              "example": {
                "email": "<string>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization's email notification settings updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization's email notification settings updated successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "public_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "has_slack_bot_token": {
                          "type": "boolean"
                        },
                        "slack_channel": {
                          "type": "string"
                        },
                        "email_notification": {
                          "type": "string"
                        },
                        "is_active": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "Organization's email notification settings updated successfully.",
                  "data": {
                    "public_id": "<string>",
                    "name": "Organization Name",
                    "description": "Organization Description",
                    "has_slack_bot_token": true,
                    "slack_channel": null,
                    "email_notification": null,
                    "is_active": false
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook/update": {
      "put": {
        "summary": "Register a Webhook",
        "description": "Registers a webhook for a specific event type.",
        "operationId": "updateWebhook",
        "tags": ["Webhook"],
        "requestBody": {
          "description": "Webhook details that need to be registered.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_type": {
                    "type": "string",
                    "example": "scribe",
                    "description": "The type of event this webhook is listening for."
                  },
                  "webhook_url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://your-webhook-url.com/webhook-handler",
                    "description": "The endpoint where webhook notifications will be sent."
                  },
                  "auth_token": {
                    "type": "string",
                    "example": "your-secret-token",
                    "description": "A secret token used to authenticate webhook requests."
                  }
                },
                "required": ["event_type", "webhook_url", "auth_token"]
              },
              "example": {
                "event_type": "scribe",
                "webhook_url": "https://your-webhook-url.com/webhook-handler",
                "auth_token": "your-secret-token"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received and validated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Webhook updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "public_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "5e11d9c6-b7e5-4717-9688-ad727f51677f"
                        },
                        "event_type": {
                          "type": "string",
                          "example": "scribe"
                        },
                        "is_active": {
                          "type": "boolean",
                          "example": true
                        },
                        "organization_public_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "6691d22b-fee0-411c-8df1-ef12769747cb"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "Webhook updated successfully",
                  "data": {
                    "public_id": "5e11d9c6-b7e5-4717-9688-ad727f51677f",
                    "event_type": "scribe",
                    "is_active": true,
                    "organization_public_id": "6691d22b-fee0-411c-8df1-ef12769747cb"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields (e.g., signature, authorization).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing required fields: signature, authorization."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing Authorization header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid or missing Authorization header."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Signature mismatch or invalid auth token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Signature mismatch or invalid auth token."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook/status": {
      "patch": {
        "summary": "Change Webhook Status",
        "description": "Enables or disables a registered webhook for a specific event type.",
        "operationId": "changeWebhookStatus",
        "tags": ["Webhook"],
        "requestBody": {
          "description": "Payload to update the webhook status.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_type": {
                    "type": "string",
                    "example": "scribe",
                    "description": "The type of event associated with the webhook."
                  },
                  "is_active": {
                    "type": "boolean",
                    "example": false,
                    "description": "Determines whether the webhook is active (`true`) or inactive (`false`)."
                  },
                  "organization_public_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "<string>",
                    "description": "The unique identifier for the organization that owns the webhook."
                  }
                },
                "required": ["event_type", "is_active", "organization_public_id"]
              },
              "example": {
                "event_type": "scribe",
                "is_active": false,
                "organization_public_id": "<string>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook's is_active status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Webhook's is_active status updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "public_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "<string>"
                        },
                        "event_type": {
                          "type": "string",
                          "example": "scribe"
                        },
                        "is_active": {
                          "type": "boolean",
                          "example": false
                        },
                        "organization_public_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "<string>"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "Webhook's is_active status updated successfully",
                  "data": {
                    "public_id": "<string>",
                    "event_type": "scribe",
                    "is_active": false,
                    "organization_public_id": "<string>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/medication_agent_v2": {
      "post": {
        "summary": "Medication Agent",
        "description": "Handles medication-related tasks.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": { "type": "string", "example": "<String>" }
                },
                "required": ["input"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Medication details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "boolean", "description": "If `false`, input was not related to medication." },
                    "reason": { "type": "string", "description": "A brief explanation of why the input is relevant to veterinary medicine." },
                    "response": {
                      "type": "object",
                      "properties": {
                        "Plain English Concise": { "type": "string", "description": "A concise summary of the medication details." },
                        "Plain English Summary": { "type": "string", "description": "A detailed summary of the medication in plain English." },
                        "Medication Details": {
                          "type": "object",
                            "properties": {
                              "drug_name_and_classification": { "type": "string", "description": "The name of the drug and its classification." },
                              "indications_and_uses": { "type": "string", "description": "Medical conditions or treatments for which the drug is used." },
                              "pharmacology_and_mechanism_of_action": { "type": "string", "description": "How the drug works in the body." },
                              "dosing_by_species": { "type": "string", "description": "Recommended dosage and variations by species." },
                              "administration_and_route": { "type": "string", "description": "How the drug is administered (oral, injectable, topical, etc.)." },
                              "contraindications": { "type": "string", "description": "Medical conditions or factors that prevent the use of this drug." },
                              "precautions_and_warnings": { "type": "string", "description": "Important safety information, including risks in special populations." },
                              "adverse_effects": { "type": "string", "description": "Possible side effects or reactions to the medication." },
                              "drug_interactions": { "type": "string", "description": "Potential interactions with other medications or substances." },
                              "monitoring_parameters": { "type": "string", "description": "Recommended monitoring tests and safety checks." },
                              "overdose_information": { "type": "string", "description": "Signs of overdose and recommended treatment." },
                              "withdrawal_times": { "type": "string", "description": "Withdrawal period for food-producing animals, if applicable." },
                              "client_information": { "type": "string", "description": "Guidance for pet owners on safe use and handling of the medication." },
                              "notes": { "type": "string", "description": "Additional relevant information about the medication." }
                            }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://agents-api.puppilot.co/"
          }
        ]
      }
    },
    "/ddx_agent_v2": {
      "post": {
        "summary": "Differential Diagnosis Agent",
        "description": "Generates differential diagnoses based on clinical presentation and diagnostic findings.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": { "type": "string", "example": "<String>" }
                },
                "required": ["input"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Differential diagnosis details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "boolean", "description": "Indicates whether the input was related to differential diagnoses." },
                    "reason": { "type": "string", "description": "A brief explanation of why the input is relevant to veterinary medicine." },
                    "response": {
                      "type": "object",
                      "properties": {
                        "Differential Diagnosis Details": {
                          "type": "object",
                            "properties": {
                              "name": { "type": "string", "description": "The name of the differential diagnosis." },
                              "cause_etiology": { "type": "string", "description": "Description of the cause or etiology of the condition." },
                              "commonly_confused_with": { "type": "string", "description": "Other conditions that may present with similar symptoms." },
                              "diagnosis_rule_outs": { "type": "string", "description": "Diagnostic tests and rule-out methods to confirm or eliminate this diagnosis." },
                              "prognosis": { "type": "string", "description": "The prognosis or expected outcome for the condition." },
                              "risk_factors_predispositions": { "type": "string", "description": "Risk factors or predisposing conditions associated with this diagnosis." },
                              "symptoms_clinical_signs": { "type": "string", "description": "The symptoms and clinical signs commonly associated with this condition." }
                            }
                        },
                        "Plain English Concise": { "type": "string", "description": "A concise summary of the differential diagnosis findings." },
                        "Plain English Summary": { "type": "string", "description": "A detailed summary of the differential diagnosis in plain English." }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://agents-api.puppilot.co"
          }
        ]
      }
    },
    "/treatment_plan_agent_v2": {
      "post": {
        "summary": "Treatment Plan Agent",
        "description": "Generates treatment plan based on clinical presentation and diagnostic findings.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": { "type": "string", "example": "<String>" }
                },
                "required": ["input"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Treatment plan details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "boolean", "description": "If `false`, input was not related to treatment plans." },
                    "reason": { "type": "string", "description": "A brief explanation of why the input is relevant to veterinary medicine." },
                    "response": {
                      "type": "object",
                      "properties": {
                        "Plain English Concise": { "type": "string", "description": "A concise summary of the treatment plan." },
                        "Plain English Summary": { "type": "string", "description": "A detailed summary of the treatment plan in plain English." },
                        "Treatment Plan Details": {
                          "type": "object",
                            "properties": {
                              "diagnosis_name": { "type": "string", "description": "The name of the condition being treated." },
                              "treatment_plan_name": { "type": "string", "description": "The name of the specific treatment plan." },
                              "treatment_goal": { "type": "string", "description": "The objective of the treatment plan." },
                              "medications": { "type": "string", "description": "Details of medications used in treatment, including name, dosage, and role." },
                              "dietary_management": { "type": "string", "description": "Dietary recommendations for managing the condition." },
                              "lifestyle_modifications": { "type": "string", "description": "Lifestyle adjustments to aid in treatment and recovery." },
                              "symptom_management": { "type": "string", "description": "Methods used to manage symptoms associated with the condition." },
                              "non-surgical_options": { "type": "string", "description": "Non-surgical treatment alternatives." },
                              "possible_surgical_options": { "type": "string", "description": "Surgical interventions if applicable." },
                              "preventative_options": { "type": "string", "description": "Preventative strategies to reduce recurrence." },
                              "regular_veterinary_monitoring": { "type": "string", "description": "Frequency of follow-ups and recommended diagnostic tests." },
                              "owner_education": { "type": "string", "description": "Key educational points for pet owners regarding the condition and treatment." }
                            }
                          
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://agents-api.puppilot.co"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "integer" },
          "message": { "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
